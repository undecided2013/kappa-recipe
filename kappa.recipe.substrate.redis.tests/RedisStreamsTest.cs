using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using StackExchange.Redis;
using System;
using System.Threading;

namespace kappa.recipe.substrate.redis.tests
{
    internal class TestInput : IBasicInput
    {
        public int Value;
        public string ID { get; set; }
        public long Timestamp { get; set; }
    }
    internal class TestStateRequest { }
    internal class TestState
    {
        public int TotalValue;
    }
    [TestClass]
    public class RedisStreamsTest
    {

        [TestMethod]
        public void ReadFromRedisStream()
        {
            // We can sue this to signal completion
            CancellationTokenSource cts = new CancellationTokenSource();
            //  Must have Redis running locally, if not, change connection string to correct host
            var redisDB = ConnectionMultiplexer.Connect("localhost").GetDatabase();
            // Delete Stream from prior runs
            redisDB.KeyDelete("tstData");
            // Populate dummy data
            for (int x = 0; x < 1000; x++)
            {
                TestInput ti = new TestInput() { ID = x.ToString(), Value = 1 };
                redisDB.StreamAdd ( "tstData", "data", JsonConvert.SerializeObject(ti) );
            }
            //TestState state = new TestState();
                DataflowBuilder<TestInput, TestState> dfBuilder =
                    new DataflowBuilder<TestInput, TestState>();
                dfBuilder.Initialize<SyncDataflow<TestInput, TestState>>().
                SetCancellationToken(cts.Token).
                SetStartupBehaviour(enStartupBehaviour.StartAtLastSnapshot).
                SetSnapshotBehaviour(enSnapshotUnits.Count, 10).
                SetInputGetter((Snapshot<TestState> snap) =>
                {
                    StreamEntry[] entries = redisDB.StreamRead("tstData", snap.LastMessageID, 1);
                    if ((entries.Length == 1) && (entries[0].Values.Length == 1))
                    {
                        TestInput input = JsonConvert.DeserializeObject<TestInput>(entries[0].Values[0].Value);
                        // If Redis ID was autogenerated it would differ from internal ID so override
                        // May have to Work on that a bit
                        if (input.ID!=entries[0].Id)
                        {
                            input.ID = entries[0].Id;
                        }
                        return input;
                    }
                    else
                    {
                        cts.Cancel();
                        return null;
                    }
                }).
                SetProcessor((Tuple<TestInput, TestState> i) =>  // Process Message
                  {
                      return new TestState()
                      {
                          TotalValue = i.Item2.TotalValue + i.Item1.Value //Simple, just total it up
                      };
                }).
                SetSnapshotRetriever(() =>
               {
                   string ss = redisDB.StringGet("tstDataSnapshot");
                   if (!String.IsNullOrEmpty(ss))
                   {
                       return JsonConvert.DeserializeObject<Snapshot<TestState>>(redisDB.StringGet("tstDataSnapshot"));
                   }
                   else
                       return null;
                }).
                SetSnapshotUpdater((Snapshot<TestState> snap) =>
                {
                    redisDB.StringSet("tstDataSnapshot", JsonConvert.SerializeObject(snap));
                    System.Diagnostics.Debug.WriteLine($"Snap:{snap.LastMessageID}, {snap.State.TotalValue}");
                }).
                SetSnapshotInitializer(() => new Snapshot<TestState>() { LastMessageID = "0-0", LastTimeStamp = DateTimeOffset.MinValue.ToUnixTimeMilliseconds() }). // Initialize Snapshot if nothing is retrieved
                SetStateInitializer(() => new TestState() { TotalValue = 0 }). // Initialize State if nothing is retrieved
                SetStatePublisher(s =>
                {
                    System.Diagnostics.Debug.WriteLine($"Total:{s.TotalValue}");
                }).
                SetStateRetriever(() => {
                    string ss = redisDB.StringGet("tstDataSnapshot");
                    if (!String.IsNullOrEmpty(ss)) {
                        return JsonConvert.DeserializeObject<TestState>(redisDB.StringGet("tstDataState"));
                        }
                    else
                        return null;
                }).
                SetStateSetter(f =>
                {
                    redisDB.StringSet("tstDataState", JsonConvert.SerializeObject(f));

                }).Build().Start();
            }
        }
    }

